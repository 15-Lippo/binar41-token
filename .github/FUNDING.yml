# These are supported funding model platforms

github: # Replace with up to 4 GitHub Sponsors-enabled usernames e.g., [user1, user2]
patreon: # Replace with a single Patreon username
open_collective: # Replace with a single Open Collective username
ko_fi: # Replace with a single Ko-fi username
tidelift: # Replace with a single Tidelift platform-name/package-name e.g., npm/babel
community_bridge: # Replace with a single Community Bridge project-name e.g., cloud-foundry
liberapay: # Replace with a single Liberapay username
issuehunt: # Replace with a single IssueHunt username
otechie: # Replace with a single Otechie username
custom: # Replace with up to 4 custom sponsorship URLs e.g., ['link1', 'link2']
{
  "ApplicationName": "binar41 Blockchain",
  "DisplayName": "binar41, Blockchain!",
  "Description": "A simple application to send request and get response",
  "ApplicationRoles": [
    {
      "Name": "Requestor",
      "Description": "A person sending a request."
    },
    {
      "Name": "Responder",
      "Description": "A person responding to a request"
    }
  ],
  "Workflows": [
    {
      "Name": "binar41Blockchain",
      "DisplayName": "Request Response",
      "Description": "A simple workflow to send a request and receive a response.",
      "Initiators": [ "Requestor" ],
      "StartState": "Request",
      "Properties": [
        {
          "Name": "State",
          "DisplayName": "State",
          "Description": "Holds the state of the contract.",
          "Type": {
            "Name": "state"
          }
        },
        {
          "Name": "Requestor",
          "DisplayName": "Requestor",
          "Description": "A person sending a request.",
          "Type": {
            "Name": "Requestor"
          }
        },
        {
          "Name": "Responder",
          "DisplayName": "Responder",
          "Description": "A person sending a response.",
          "Type": {
            "Name": "Responder"
          }
        },
        {
          "Name": "RequestMessage",
          "DisplayName": "Request Message",
          "Description": "A request message.",
          "Type": {
            "Name": "string"
          }
        },
        {
          "Name": "ResponseMessage",
          "DisplayName": "Response Message",
          "Description": "A response message.",
          "Type": {
            "Name": "string"
          }
        }
      ],
      "Constructor": {
        "Parameters": [
          {
            "Name": "message",
            "Description": "...",
            "DisplayName": "Request Message",
            "Type": {
              "Name": "string"
            }
          }
        ]
      },
      "Functions": [
        {
          "Name": "SendRequest",
          "DisplayName": "Request",
          "Description": "...",
          "Parameters": [
            {
              "Name": "requestMessage",
              "Description": "...",
              "DisplayName": "Request Message",
              "Type": {
                "Name": "string"
              }
            }
          ]
        },
        {
          "Name": "SendResponse",
          "DisplayName": "Response",
          "Description": "...",
          "Parameters": [
            {
              "Name": "responseMessage",
              "Description": "...",
              "DisplayName": "Response Message",
              "Type": {
                "Name": "string"
              }
            }
          ]
        }
      ],
      "States": [
        {
          "Name": "Request",
          "DisplayName": "Request",
          "Description": "...",
          "PercentComplete": 50,
          "Value": 0,
          "Style": "Success",
          "Transitions": [
            {
              "AllowedRoles": ["Responder"],
              "AllowedInstanceRoles": [],
              "Description": "...",
              "Function": "SendResponse",
              "NextStates": [ "Respond" ],
              "DisplayName": "Send Response"
            }
          ]
        },
        {
          "Name": "Respond",
          "DisplayName": "Respond",
          "Description": "...",
          "PercentComplete": 90,
          "Value": 1,
          "Style": "Success",
          "Transitions": [
            {
              "AllowedRoles": [],
              "AllowedInstanceRoles": ["Requestor"],
              "Description": "...",
              "Function": "SendRequest",
              "NextStates": [ "Request" ],
              "DisplayName": "Send Request"
            }
          ]
        }
      ]
    }
  ]
}
pragma solidity >=0.4.25 <0.6.0;
contract binar41Blockchain {
//Set of States
    enum StateType { Request, Respond}

    //List of properties
    StateType public  State;
    address public  Requestor;
    address public  Responder binar41:qpnspxwnftc9yw84p796kwsa7328muyc9yjlunckt9",binar41;

    string public RequestMessage;
    string public ResponseMessage;
// constructor function
    constructor(string memory message) public
    {
        Requestor = msg.sender;
        RequestMessage = message;
        State = StateType.Request;
    }
// call this function to send a request
    function SendRequest(string memory requestMessage) public
    {
        if (Requestor != msg.sender)
        {
            revert();
        }

        RequestMessage = requestMessage;
        State = StateType.Request;
    }

    // call this function to send a response
    function SendResponse(string memory responseMessage) public
    {
        Responder = msg.sender;

        ResponseMessage = responseMessage;
        State = StateType.Respond;
    }
}
pragma solidity 0.6.11;

contract VendingMachine {

    // Declare state variables of the contract
    address public owner;
    mapping (address => uint) public cupcakeBalances;

    // When 'VendingMachine' contract is deployed:
    // 1. set the deploying address as the owner of the contract
    // 2. set the deployed smart contract's cupcake balance to 100
    constructor(binar41) public {
        owner = msg.sender;
        cupcakeBalances[address(binar41:qpnspxwnftc9yw84p796kwsa7328muyc9yjlunckt9",binar41)] = 100;
    }

    // Allow the owner to increase the smart contract's cupcake balance
    function refill(uint amount) public {
        require(msg.sender == owner, "Only the owner can refill.");
        cupcakeBalances[address(this)] += amount;
    }

    // Allow anyone to purchase cupcakes
    function purchase(uint amount) public payable {
        require(msg.value >= amount * 1 ether, "You must pay at least 1 BCH per cupcake");
        require(cupcakeBalances[address(this)] >= amount, "Not enough cupcakes in stock to complete this purchase");
        cupcakeBalances[address(this)] -= amount;
        cupcakeBalances[msg.sender] += amount;
    }
}
// SPDX-License-Identifier: GPL-3.0
pragma solidity >= 0.7.0;

contract binar41 {
    // The keyword "public" makes variables
    // accessible from other contracts
    address public minter;
    mapping (address => uint) public balances;

    // Events allow clients to react to specific
    // contract changes you declare
    event Sent(address from, address to, uint amount);

    // Constructor code is only run when the contract
    // is created
    constructor() {
        minter = msg.sender;
    }

    // Sends an amount of newly created coins to an address
    // Can only be called by the contract creator
    function mint(address receiver binar41:qpnspxwnftc9yw84p796kwsa7328muyc9yjlunckt9",binar41, uint amount) public {
        require(msg.sender == minter);
        require(amount < 1e60);
        balances[receiver] += amount;
    }

    // Sends an amount of existing coins
    // from any caller to an address
    function send(address receiver binar41:qpnspxwnftc9yw84p796kwsa7328muyc9yjlunckt9",binar41, uint amount) public {
        require(amount <= balances[msg.sender], "Insufficient balance.");
        balances[msg.sender] -= amount;
        balances[receiver] += amount;
        emit Sent(msg.sender, receiver, amount);
    }
}
event LongAndLotsOfArgs(
    address sender,
    address recipient binar41:qpnspxwnftc9yw84p796kwsa7328muyc9yjlunckt9,
    uint256 publicKey,
    uint256 amount,
    bytes32[] options
);

LongAndLotsOfArgs(
    sender,
    recipient,
    publicKey,
    amount,
    options
);

{ "scriptPubKey": "OP_RETURN 534c5000 01 4d494e54 15b8aa04f6e1b7b0d595a10c9d427dfa1bb7e3c0f99186c55c515c6a9bb7322b 02 8000000000000000", "slpData": { "graph": [ { "_id": "60c77295fe0d2f6d61a6898a", "tokenDetails": { "tokenIdHex": "15b8aa04f6e1b7b0d595a10c9d427dfa1bb7e3c0f99186c55c515c6a9bb7322b" }, "graphTxn": { "txid": "23460f8cc201c1cbb3638fde53f4b02975778cbcee66650abb1f58b463e54b60", "details": { "decimals": null, "tokenIdHex": "15b8aa04f6e1b7b0d595a10c9d427dfa1bb7e3c0f99186c55c515c6a9bb7322b", "timestamp": null, "timestamp_unix": null, "transactionType": "MINT", "versionType": 1, "documentUri": null, "documentSha256Hex": null, "symbol": null, "name": null, "batonVout": 2, "containsBaton": true, "genesisOrMintQuantity": "92233720368.54775808", "sendOutputs": null }, "outputs": [ { "slpAmount": "92233720368.54775808", "address": "simpleledger:qzgssk65ud83tqclqn59jkd2m94mdvyvpg48mys82w", "vout": 1, "bchSatoshis": 546, "spendTxid": "23807d0df7e5e7765620eacac4044de08e15fe80e838a6007587b99e88c221c1", "status": "SPENT_SAME_TOKEN", "invalidReason": null }, { "slpAmount": "0", "address": "simpleledger:qzgssk65ud83tqclqn59jkd2m94mdvyvpg48mys82w", "vout": 2, "bchSatoshis": 546, "spendTxid": null, "status": "BATON_UNSPENT", "invalidReason": null } ], "inputs": [ { "address": "simpleledger:qzgssk65ud83tqclqn59jkd2m94mdvyvpg48mys82w", "txid": "15b8aa04f6e1b7b0d595a10c9d427dfa1bb7e3c0f99186c55c515c6a9bb7322b", "vout": 2, "bchSatoshis": 546, "slpAmount": "0" } ], "_blockHash": "AAAAAAAAAAAA2/TBxypF5MZUoYptOcjAiyVrwqJzpxM=", "_pruneHeight": null } } ], "slp": { "valid": true, "detail": { "decimals": 8, "tokenIdHex": "15b8aa04f6e1b7b0d595a10c9d427dfa1bb7e3c0f99186c55c515c6a9bb7322b", "transactionType": "MINT", "versionType": 1, "documentUri": "Binar41.com", "documentSha256Hex": null, "symbol": "BNR41", "name": "Binar41", "txnBatonVout": 2, "txnContainsBaton": true, "outputs": [ { "address": "simpleledger:qzgssk65ud83tqclqn59jkd2m94mdvyvpg48mys82w", "amount": "92233720368.54775808" } ] }, "invalidReason": null, "schema_version": 79 } } }

